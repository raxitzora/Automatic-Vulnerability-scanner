import requests
from bs4 import BeautifulSoup
import re
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import sqlite3
import os

# Define check functions
def check_xss(content):
    xss_payloads = [
        '<script>alert(1)</script>', 'javascript:alert(1)', '"><img src=x onerror=alert(1)>',
        '<img src=x onerror=alert(1)>', '"><svg/onload=alert(1)>', '"><a href="javascript:alert(1)">Click me</a>',
        'javascript:confirm(1)', '<iframe/src="javascript:alert(1)">'
    ]
    return any(payload in content for payload in xss_payloads)

def check_sql_injection(content):
    sql_patterns = [
        'SELECT * FROM', 'UNION SELECT', 'OR 1=1', 'AND 1=1', 'DROP TABLE', 'INSERT INTO',
        '1\' OR \'1\'=\'1', '1" OR "1"="1', 'SLEEP(', 'BENCHMARK(', '1\' OR 1=1 --', '1\' AND 1=1 #'
    ]
    return any(pattern in content for pattern in sql_patterns)

def check_directory_traversal(content):
    traversal_patterns = [
        '../', '..\\', '%2e%2e%2f', '%2e%2e\\', '%2e%2e%5c', '%2e%2e%2e%2e', '%2e%2e%2e%2e%5c',
        '..%2f', '..%5c', '..%2e%2e%2f', '..%2e%2e%5c'
    ]
    return any(pattern in content for pattern in traversal_patterns)

def check_open_redirect(content):
    return re.search(r'location\.href\s*=\s*["\']http', content) is not None

def check_insecure_headers(response_headers):
    insecure_headers = ['X-Powered-By', 'Server', 'X-AspNet-Version', 'X-AspNetMvc-Version']
    return any(header in response_headers for header in insecure_headers)

def get_page_content(url, use_selenium=False):
    if use_selenium:
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        service = Service('/path/to/chromedriver')  # Update with the correct path
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.get(url)
        content = driver.page_source
        driver.quit()
    else:
        response = requests.get(url)
        content = response.text
    return content

def initialize_database():
    if not os.path.exists('scan_results.db'):
        conn = sqlite3.connect('scan_results.db')
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                url TEXT,
                xss TEXT,
                sql TEXT,
                dir TEXT,
                redirect TEXT,
                headers TEXT
            )
        ''')
        conn.commit()
        conn.close()

def save_results_to_db(url, results):
    conn = sqlite3.connect('scan_results.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO results (url, xss, sql, dir, redirect, headers)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (url, results['xss'], results['sql'], results['dir'], results['redirect'], results['headers']))
    conn.commit()
    conn.close()

def scan_url(url, vulnerabilities, use_selenium=False):
    try:
        content = get_page_content(url, use_selenium)
        response = requests.get(url)
        response_headers = response.headers

        results = {
            'xss': 'Not Detected',
            'sql': 'Not Detected',
            'dir': 'Not Detected',
            'redirect': 'Not Detected',
            'headers': 'Not Detected'
        }

        if 'xss' in vulnerabilities:
            if check_xss(content):
                results['xss'] = 'Detected'
        
        if 'sql' in vulnerabilities:
            if check_sql_injection(content):
                results['sql'] = 'Detected'
        
        if 'dir' in vulnerabilities:
            if check_directory_traversal(content):
                results['dir'] = 'Detected'

        if 'redirect' in vulnerabilities:
            if check_open_redirect(content):
                results['redirect'] = 'Detected'

        if 'headers' in vulnerabilities:
            if check_insecure_headers(response_headers):
                results['headers'] = 'Detected'

        # Save results to a file
        with open('scan_results.txt', 'a') as file:
            file.write(f"Scan results for {url}:\n")
            for key, value in results.items():
                file.write(f"{key.capitalize()}: {value}\n")
            file.write("\n")

        # Save results to a database
        save_results_to_db(url, results)

    except requests.RequestException as e:
        print(f'Error: {e}')

def main():
    print("Select vulnerabilities to scan for:")
    print("1. XSS")
    print("2. SQL Injection")
    print("3. Directory Traversal")
    print("4. Open Redirect")
    print("5. Insecure Headers")
    print("6. All")
    print("7. Dynamic Content (Use Selenium)")

    choice = input("Enter your choice (1/2/3/4/5/6/7): ")
    
    vulnerabilities = []
    use_selenium = False
    
    if choice == '1':
        vulnerabilities.append('xss')
    elif choice == '2':
        vulnerabilities.append('sql')
    elif choice == '3':
        vulnerabilities.append('dir')
    elif choice == '4':
        vulnerabilities.append('redirect')
    elif choice == '5':
        vulnerabilities.append('headers')
    elif choice == '6':
        vulnerabilities.extend(['xss', 'sql', 'dir', 'redirect', 'headers'])
    elif choice == '7':
        use_selenium = True
        vulnerabilities.extend(['xss', 'sql', 'dir', 'redirect', 'headers'])
    else:
        print("Invalid choice. Exiting.")
        return
    
    target_url = input('Enter the website URL to scan: ')
    initialize_database()  # Ensure the database is set up
    scan_url(target_url, vulnerabilities, use_selenium)

if __name__ == "__main__":
    main()
